/**
 * Popover
 **/
import Breakpoint from '@govflanders/vl-ui-util/src/js/breakpoint';

import Popper from 'popper.js';

/**
 * Private Variables
 */
const poClass = `js-${vl.ns}popover`,
  poToggleClass = `${poClass}__toggle`,
  poAriaExpandedAttr = 'aria-expanded',
  poOpenClass = `${poClass}--open`,
  poClosingClass = `${poClass}--closing`,
  poContentClass = `${vl.ns}popover__content`,
  poContentCloseClass = `${poContentClass}--close`,
  poRightClass = `${vl.ns}popover--align-right`,
  poLeftClass = `${vl.ns}popover--align-left`,
  poCenterClass = `${vl.ns}popover--align-center`,
  backDropClass = `${vl.ns}backdrop`,
  backDropActiveClass = `${vl.ns}backdrop--active`,
  poCloseBtnClass = `${vl.ns}popover__close-btn`,
  dataPrefix = `data-${vl.ns}`,
  poAttr = `${dataPrefix}popover`,
  poAttrOffsetX = `${poAttr}-offset-x`,
  poAttrOffsetY = `${poAttr}-offset-y`,
  poRemoveClosingDelay = 600;

let latestPopoverZIndex = 1,
  backDrop = null;
/**
 * Private functions
 */

/**
 * close the popover
 * @param popperReference
 * @private
 */
const _closePopOver = popperReference => {
  if(vl.util.hasClass(popperReference, poOpenClass)) {
    vl.util.removeClass(popperReference, poOpenClass);
    vl.util.addClass(popperReference, poClosingClass);
    backDrop ? vl.util.removeClass(backDrop, backDropActiveClass) : null;

    window.setTimeout(()=> {
      vl.util.removeClass(popperReference, poClosingClass);
    }, poRemoveClosingDelay);
  }
};

/**
 * open the popover
 * @param popperReference
 * @private
 */
const _openPopOver = popperReference => {
  vl.util.removeClass(popperReference, poClosingClass);
  vl.util.addClass(popperReference, poOpenClass);
  backDrop ? vl.util.addClass(backDrop, backDropActiveClass) : null;
};

/**
 * update the z-index of the popers in desktop
 * @param element
 * @private
 */
const _updateZIndex = element => {
  element.style.zIndex = latestPopoverZIndex;
  latestPopoverZIndex++;
};

/**
 * create the backdrop and generate a close button for the mobile popover
 * @param popperReference
 * @private
 */
const _createElementsForMobile = (popperReference) => {
  if(document.querySelectorAll(`.${backDropClass}`).length === 0) {
    const body = document.querySelector('body');

    backDrop = document.createElement('div');
    backDrop.classList.add(backDropClass);

    // close the popovers
    backDrop.addEventListener('click', () => {
      _closePopOver(popperReference);
    });

    body.appendChild(backDrop);
  }

  if(document.querySelectorAll(`.${poContentClass} .${backDropClass}`).length === 0) {
    const closeBtn = popperReference.querySelector(`.${poCloseBtnClass}`);

    closeBtn.addEventListener('click', () => {
      _closePopOver(popperReference);
    });
  }
};

/**
 * initiate the popper.js ellement
 * @param popperReference
 * @param popperContent
 * @private
 */
const _initiatePopper = (popperReference, popperContent) => {
  let options = {
    placement: 'bottom-end',
    offset: 10,
    modifiers: {
      offset: {
        offset: '0,10'
      },
      flip: {
        behavior: ['bottom', 'top']
      }
    }
  };

  if(vl.util.hasClass(popperReference, poRightClass)) {
    options.modifiers.offset.offset = '12, 10';
  }

  const offsetX = popperContent.getAttribute(poAttrOffsetX);
  const offsetY = popperContent.getAttribute(poAttrOffsetY);

  if(offsetX && offsetX) {
    options.modifiers.offset.offset = `${offsetX}, ${offsetY}`;
  } else if(offsetX) {
    options.modifiers.offset.offset = `${offsetX}, 10`;
  } else if(offsetY) {
    options.modifiers.offset.offset = `0, ${offsetY}`;
  }

  if(vl.util.hasClass(popperReference, poLeftClass)) {
    options.placement = 'bottom-start';
  } else if(vl.util.hasClass(popperReference, poCenterClass)) {
    options.placement = 'bottom';
  }
  const popper = new Popper(popperReference, popperContent, options);

  // make it reposition
  // hack so the popper can define the width of the popperContent, otherwise it breaks out to the right
  popper.options.onCreate = popper.options.onUpdate = () => {
    popper.state.updateBound();
  };

  return popper;
};

/**
 * create the popover
 * @param popperReference
 * @param popperContent
 * @private
 */
const _createPopover = (popperReference, popperContent) => {
  const breakpoint = new Breakpoint();
  let popper = null;

  breakpoint.dress();
  _createElementsForMobile(popperReference, popperContent);

  window.addEventListener('resize', vl.util.debounce(() => {
    if(vl.breakpoint.value === 'xsmall' || vl.breakpoint.value === 'small') {
      popperContent.style = '';

      if(popper) {
        popper.destroy();
        popper = null;
      }
    } else if (!popper) {
      popper = _initiatePopper(popperReference, popperContent);
    }
  }, 200));

  window.dispatchEvent(new Event('resize'));

  vl.util.addClass(popperContent, poContentCloseClass);

  // disables the document click eventlistener
  popperReference.addEventListener('click', e => {
    e.stopPropagation();
  });

  // close the popovers
  document.addEventListener('click', () => {
    _closePopOver(popperReference);
  });

  document.addEventListener('keyup', evt => {
    evt = evt || window.event;
    let isEscape = false;

    if('key' in evt) {
      isEscape = evt.key === 'Escape' || evt.key === 'Esc';
    } else {
      isEscape = evt.keyCode === 27;
    }

    if(isEscape) {
      _closePopOver(popperReference);
    }
  });

  const buttons = popperReference.querySelectorAll(`.${poToggleClass}`);

  vl.util.each(buttons, button => {
    // toggle buttons
    button.addEventListener('click', () => {
      if(vl.util.hasClass(popperReference, poOpenClass)) {
        _closePopOver(popperReference);
        vl.util.each(buttons, button => {
          button.setAttribute(poAriaExpandedAttr, 'false');
        });
      } else {
        _openPopOver(popperReference);
        vl.util.each(buttons, button => {
          button.setAttribute(poAriaExpandedAttr, 'true');
        });

        if(breakpoint._getBreakpoint() !== 'small' && breakpoint._getBreakpoint() !== 'xsmall') {
          _updateZIndex(popperContent);
        }
      }
    });
  });
};

class Popover {
  /**
   * dress one element
   * @param element
   */
  dress(element) {
    _createPopover(element, element.querySelector(`.${poContentClass}`));
  }

  /**
   * dressAll function for the accordion functionality
   * @return {false}
   */
  dressAll() {
    // get all elements
    const elements = document.querySelectorAll(
      `.${poClass}:not([data-${vl.ns}js-dress="false"]),
      [${poAttr}]:not([data-${vl.ns}js-dress="false"])`
    );

    // add functionality to the element
    vl.util.each(elements, element => {
      this.dress(element);
    });
  }
}

if(!('popover' in vl)) {
  vl.popover = new Popover();
  vl.popover.dressAll();
}

export default Popover;
